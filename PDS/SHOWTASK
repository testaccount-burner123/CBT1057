/* REXX    SHOWTASK   Subroutine of SHOWMEM designed to be a front end
                      for a personal log system.  There are 5 keywords
                      that SHOWMEM calls SHOWTASK with:

                      ACTION  => Is the action being performed (e.g.
                                 ROLL, COPY or ACQUIRE)
                      FROMDSN => Dataset the action was done from.
                      FROMMEM => Member the action was done for.
                      TODSN   => Dataset the action was done to.
                      TOMEM   => Member the action was done to.

           Written by Chris Lewis 19951108

     Impact Analysis
.    SYSEXEC   TBLGEN
.    SYSEXEC   TRAPOUT

     Modification History
     20020930 fxc upgrade from v.960103 to v.20020513; DECOMM;
                  RXSKLY2K; add HELP text; enable NOUPDT;
     20230411 fxc specify SM table to AA

*/ arg argline
address ISPEXEC                        /* REXXSKEL ver.20020513      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /* Local initialization      -*/
call B_POST                            /* add row to status table   -*/

exit                                   /*@ SHOWTASK                  */
/*
   Initialization.  Acquire parameters.
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch  then call BRANCH
   address TSO

   smaction = KEYWD("ACTION")          /* Action performed           */
   smindsn  = KEYWD("FROMDSN")
   sminmem  = KEYWD("FROMMEM")
   smoutdsn = KEYWD("TODSN")
   smoutmem = KEYWD("TOMEM")

return                                 /*@ A_INIT                    */
/*
   Table operations: open, write, close
.  ----------------------------------------------------------------- */
B_POST:                                /*@                           */
   if branch  then call BRANCH
   address ISPEXEC

   call BA_OPEN                        /*                           -*/

   parse Value(Date("S") Time())  with smdate smtime
   if noupdt then do;  say,
      "TBADD" $tn$ "ORDER"
      say "TBADD was bypassed because NOUPDT was requested."
      end
   else,
      "TBADD" $tn$ "ORDER"

   call BZ_CLOSE                       /*                           -*/

return                                 /*@ B_POST                    */
/*
   Open the SMTRACK table.  Call TBLGEN to create it if necessary.
   KEYS(SMDATE SMTIME SMINMEM)
   NAMES(SMINDSN SMACTION SMOUTDSN SMOUTMEM)
.  ----------------------------------------------------------------- */
BA_OPEN:                               /*@                           */
   if branch  then call BRANCH
   address ISPEXEC

   "LIBDEF  ISPTLIB  DATASET  ID("isptlib")"

   "TBSTATS" $tn$ "STATUS1(s1) STATUS2(s2)"
   if s1 = 2 then do                   /* doesn't exist              */
      call Z_QUEUE                     /* add SM to AAMSTR          -*/
      "TBLGEN SM WRITE REPLACE"
      "TBSORT" $tn$ "FIELDS( smdate,c,d , smtime,c,d )"
      end; else,
   if s1 > 2 then do
      say "Table" $tn$ "not available."
      exit
      end; else,
   if s2 = 1 then,                     /* not open                   */
      "TBOPEN " $tn$ "WRITE"
   else "TBTOP" $tn$

   "LIBDEF  ISPTLIB"

return                                 /*@ BA_OPEN                   */
/*
   Close and save the SMTRACK table
.  ----------------------------------------------------------------- */
BZ_CLOSE:                              /*@                           */
   if branch  then call BRANCH
   address ISPEXEC

   "LIBDEF  ISPTABL  DATASET  ID("isptabl")"
   "TBCLOSE" $tn$
   "LIBDEF  ISPTABL"

return                                 /*@ BZ_CLOSE                  */
/*
   Queue seven (7) lines containing the key datapoints for a new table
   that does not yet exist on AAMSTR.  You should also queue a line for
   'AALIBR' with a fully-qualified unquoted DSN if this table is to
   reside on a known dataset.  Invoke TBLMSTR with 'NEWROW' to establish
   the CP table so that future uses of COMPARM will use the established
   definition.
.  ----------------------------------------------------------------- */
Z_QUEUE:                               /*@                           */
   if branch then call BRANCH
   address TSO

   "NEWSTACK"
   queue "AATBLID SM                                                           "
   queue "AATBLNM SMTRACK                                                      "
   queue "AAKEYSD SMDATE SMTIME SMINMEM                                        "
   queue "AANAMES SMINDSN SMACTION SMOUTDSN SMOUTMEM                           "
   queue "AADESC  Track SHOWMEM activity                                       "
   queue "AASORT  SMDATE,C,A SMTIME,C,A                                        "
   queue "AALIBR  *                                                            "
   "TBLMSTR (( NEWROW"  opts
   "DELSTACK"

return                                 /*@ Z_QUEUE                   */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO

   parse value KEYWD("ISPTLIB") "ISPF.ISPPROF"   with,
               isptlib   .

   parse value KEYWD("ISPTABL")  isptlib    with,
               isptabl   .

   parse value KEYWD("USETBL")   "SMTRACK"  with,
               $tn$      .

return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg
ex_nam = Left(exec_name,8)             /* predictable size           */

say "                                                                          "
say "  "ex_nam"      logs activity records from SHOWMEM.                       "
say "                                                                          "
say "  Syntax:   "ex_nam"  <ACTION  smaction>                        (Required)"
say "                      <FROMDSN smindsn>                         (Required)"
say "                      <FROMMEM sminmem>                         (Required)"
say "                      <TODSN   smoutdsn>                        (Required)"
say "                      <TOMEM   smoutmem>                        (Required)"
say "                 ((   <ISPTLIB tbldsn>                          (Defaults)"
say "                      <ISPTABL tbldsn>                          (Defaults)"
say "                      <USETBL  table>                           (Defaults)"
say "                                                                          "
say "            smaction  the action being logged by SHOWMEM                  "
say "                                                                          "
say "            smindsn   names the source dataset for <smaction>             "
say "                                                                          "
say "            sminmem   names the source member for <smaction>              "
say "                                                                          "
say "            smoutdsn  names the target dataset for <smaction>             "
say "                                                                          "
say "            smoutmem  names the target member for <smaction>              "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "                                                                          "
say "  Keywords ISPTLIB, ISPTABL, and USETBL may appear to the right of a      "
say "  double-open-parentheses ( '((' ).                                       "
say "                                                                          "
say "            tbldsn    names the existing (ISPTLIB) or output (ISPTABL)    "
say "                      table library.  If not specified, the user's        "
say "                      ISPF.ISPPROF will be assumed.                       "
say "                                                                          "
say "            table     names the table to be used for logging.  If not     "
say "                      specified, 'SMTRACK' will be assumed.               "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "                                                                          "
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        MONITOR:  displays key information throughout processing.         "
say "                                                                          "
say "        NOUPDT:   by-pass all update logic.                               "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the             "
say "                  execution in REXX TRACE Mode.                           "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();pull line;say line;end /* pump to the screen       */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg "Invalid length for delimiter("dlm") with KEYPHRS("kp")"
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg "No matching second delimiter("dlm") with KEYPHRS("kp")"
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
