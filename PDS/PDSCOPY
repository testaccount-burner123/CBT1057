/* REXX    PDSCOPY    Copy a member of a PDS to another.

           Written by Chris Lewis 19960122

     Impact Analysis
.    SYSEXEC   DFLTHLQ
.    SYSEXEC   TRAPOUT

     Modification History
     19980828 fxc upgrade from v.9601013 to v.19980225; RXSKLY2K;
                  DECOMM;
     20230411 fxc adjust HELP
     20240513 fxc changed SYSPROC to SYSEXEC in I/A;
     20241102 fxc cosmetics;

*/
address TSO                            /* REXXSKEL ver.19980225      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc     = trace(tv)
info   = parms                         /* to enable parsing          */

fromdsn = KEYWD("FROM")
todsn   = KEYWD("TO")
frommem = KEYWD("MEMBER")
tomem   = KEYWD("AS")

tomem   = word(tomem frommem,1)

if words(fromdsn todsn frommem tomem) = 4 then nop
else exit(500)

alloc.0 = "NEW CATALOG track like('"fromdsn"') SPACE(50,10)"
alloc.1 = "SHR"

stat    = sysdsn("'"todsn"'") = "OK"

"alloc f(sysut1) da('"fromdsn"') shr reuse"
"alloc f(sysut2) da('"todsn"') reuse" alloc.stat
"alloc f(sysprint) new tracks space(1) unit(sysda) lrecl(80)",
                       "blksize(0) recfm(f b) reu"
"alloc f(sysin) new tracks space(1) unit(sysda) lrecl(80)",
                       "blksize(0) recfm(f b) reu"
"NEWSTACK"

 queue "NQACOPY1      COPY INDD=SYSUT1,OUTDD=SYSUT2"
 queue "              SELECT MEMBER=(("frommem","tomem",R))"
"execio" queued() "diskw sysin (finis"

"IEBCOPY"
 save_rc = rc

 if save_rc > 4 | save_rc < 0 then do
    address ISPEXEC
   "lminit dataid(ddnid) ddname(SYSPRINT)" /* ddname to edit         */
   "edit dataid("ddnid")"
    address TSO
    end

"FREE F(SYSIN SYSPRINT SYSUT1 SYSUT2)"

"DELSTACK"

exit(save_rc)                          /*@ PDSCOPY                   */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg Â¬= "" then do ; say helpmsg; say ""; end
ex_nam = Left(exec_name,8)             /* predictable size           */
say "  "ex_nam"      Uses IEBCOPY to copy a member from one dataset to another."
say "                Largely obsoleted by PDSCOPYD.                            "
say "                                                                          "
say "  Syntax:   "ex_nam"  FROM     dsn     - Fully qualified w/o quotes       "
say "                      MEMBER   mem     - Member to copy                   "
say "                      TO       dsn     - dataset to copy to               "
say "                      AS       mem     - copy member as ...               "
say "                                                                          "
say "            Called routine that will copy a dsn/member combo to another   "
say "            dsn/member combo.  The return code from IEBCOPY will be       "
say "            returned to the caller.  If copy fails then the user will be  "
say "            placed into an edit session of the SYSPRINT.                  "
say "                                                                          "
  "NEWSTACK"; pull; "CLEAR"; "DELSTACK"
say "   Debugging tools provided include:                                      "
say " "
say "        BRANCH    show all paragraph entries.                             "
say " "
say "        TRACE tv  will use value following TRACE to place the execution in"
say "                  REXX TRACE Mode.                                        "
say " "
say " "
say "   Debugging tools can be accessed in the following manner:               "
say " "
say "        TSO" exec_name"  parameters  ((  debug-options                    "
say " "
say "   For example                                                            "
say " "
say "        TSO" exec_name " (( MONITOR TRACE ?R                              "
if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   $a#y = sigl                         /* where was I called from ?  */
   do $b#x = $a#y to 1 by -1           /* inch backward to label     */
      if Right(Word(Sourceline($b#x),1),1) = ":" then do
         parse value sourceline($b#x) with $l#n ":" . /* Paragraph   */
         leave ; end                   /*                name        */
   end                                 /* $b#x                       */

   select
      when brparm = "NAME" then return($l#n) /* Return full name     */
      when brparm = "ID"      then do  /*        Return prefix       */
         parse var $l#n $l#n "_" .     /* get the prefix             */
         return($l#n)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left($l#n,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   say "Total Stacks" rc ,             /* rc = #of stacks            */
       "Begin Stacks" tk_init_stacks , /* Stacks present at start    */
       "Stacks to DUMP" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      say "Processing Stack #" dd "Total Lines:" queued()
      do queued();pull line;say line;end /* pump to the screen       */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/*
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+1)        /* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg "Invalid length for delimiter("dlm") with KEYPHRS("kp")"
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg "No matching second delimiter("dlm") with KEYPHRS("kp")"
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   address TSO "CLEAR"
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say sourceline(ssii) ; end
   address TSO "CLEAR"
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":" errortext(
rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Requires DFLTHLQ.  Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm  .
   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   "NEWSTACK"
   "DFLTHLQ"  ; pull hlq.  hlqdata
   "DELSTACK"

   do while hlqdata <> ""
      parse var hlqdata site hlq.site hlqdata
   end

   tk_hlq  = KEYWD("USEHLQ")
   parse value tk_hlq  hlq.node   with  hlq  .  /* default to prod   */

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "tk_globalvars exec_name tv helpmsg sw. zerrhm",
                   "zerralrm zerrsm zerrlm tk_init_stacks branch",
                   "monitor noupdt hlq"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
